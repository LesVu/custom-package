name: Build Fex

on:
  workflow_dispatch:

jobs:
  fex-debian:
    name: Build package on arm64
    runs-on: ubuntu-22.04

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: checkout Neovim
        uses: actions/checkout@v3
        with:
          repository: FEX-Emu/FEX
          path: fex
          ref: FEX-2310
          submodules: recursive

      - name: Get Date
        id: get-date
        run: |
          echo "date=$(TZ='Asia/Singapore' /bin/date "+%I:%M%p_%d/%m/%Y")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Mkdir
        run: mkdir -p "${PWD}/ccache"

      - name: ccache cache files
        uses: actions/cache/restore@v3
        with:
          path: ccache
          key: fex-bookworm-arm64-ccache-

      - name: Running build
        uses: LesVu/run-on-arch-action@main
        with:
          arch: aarch64
          distro: bookworm
          #base_image: arm64v8/r-base
          # base_image: --platform=linux/arm64 debian:bookworm
          setup: |
            mkdir -p "${PWD}/artifacts"

          # env: | # YAML, but pipe character is necessary
          #   DESTDIR: /artifacts

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            --volume "${PWD}/ccache:/root/.ccache"

          dockerfile_command: |
            RUN apt-get update && apt-get install -q -y \
            git cmake ninja-build build-essential pkg-config ccache clang llvm lld binfmt-support \
            libsdl2-dev libepoxy-dev libssl-dev python3-setuptools g++-x86-64-linux-gnu \
            libgcc-12-dev-i386-cross libgcc-12-dev-amd64-cross nasm python3-clang \
            libstdc++-12-dev-i386-cross libstdc++-12-dev-amd64-cross libstdc++-12-dev-arm64-cross \
            squashfs-tools squashfuse libc-bin libc6-dev-i386-amd64-cross \
            lib32stdc++-12-dev-amd64-cross \
            && rm -rf /var/lib/apt/lists/*

          run: |
            cd fex
            mkdir Build
            cd Build
            CC=clang CXX=clang++ cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DUSE_LINKER=lld -DENABLE_LLD=True -DBUILD_TESTS=False -DOVERRIDE_VERSION=detect -DENABLE_ASSERTIONS=False -G Ninja ..
            ninja
            cpack -G DEB -D CPACK_DEBIAN_FILE_NAME=DEB-DEFAULT
            mv *.deb /artifacts

      - uses: actions/cache/save@v3
        if: always()
        with:
          path: ccache
          key: fex-bookworm-arm64-ccache-${{ steps.get-date.outputs.date }}

      - name: Move to debian repo
        run: |
          mv artifacts/*.deb debian_repo/pool

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: List GPG keys
        run: gpg -K

      - name: Write new package to repo
        run: |
          cd $GITHUB_WORKSPACE/debian_repo
          rm Packages || echo "Failed to remove packages file"
          rm Packages.gz || echo "Failed to remove packages.gz file"
          rm Release || echo "Failed to remove release file"
          rm Release.gpg || echo "Failed to remove release.gpg file"
          rm InRelease || echo "Failed to remove inrelease file"
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          gpg --default-key LesVu -abs -o - Release > Release.gpg || error "failed to sign Release.gpg with gpg "
          gpg --default-key LesVu --clearsign -o - Release > InRelease || error "failed to sign InRelease with gpg"

      - name: Commit and push
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: "debian_repo/*"
